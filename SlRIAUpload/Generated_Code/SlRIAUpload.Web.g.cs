//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SlRIAUpload
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace SlRIAUpload.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'UploadDomainService' DomainService.
    /// </summary>
    public sealed partial class UploadDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadDomainContext"/> class.
        /// </summary>
        public UploadDomainContext() : 
                this(new WebDomainClient<IUploadDomainServiceContract>(new Uri("SlRIAUpload-Web-UploadDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UploadDomainService service URI.</param>
        public UploadDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IUploadDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public UploadDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'FileIfExistsDelete' method of the DomainService.
        /// </summary>
        /// <param name="fileName">The value for the 'fileName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> FileIfExistsDelete(string fileName, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fileName", fileName);
            this.ValidateMethod("FileIfExistsDelete", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("FileIfExistsDelete", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'FileIfExistsDelete' method of the DomainService.
        /// </summary>
        /// <param name="fileName">The value for the 'fileName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> FileIfExistsDelete(string fileName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fileName", fileName);
            this.ValidateMethod("FileIfExistsDelete", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("FileIfExistsDelete", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UploadFilePart' method of the DomainService.
        /// </summary>
        /// <param name="fileName">The value for the 'fileName' parameter of this action.</param>
        /// <param name="buffer">The value for the 'buffer' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UploadFilePart(string fileName, byte[] buffer, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fileName", fileName);
            parameters.Add("buffer", buffer);
            this.ValidateMethod("UploadFilePart", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UploadFilePart", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UploadFilePart' method of the DomainService.
        /// </summary>
        /// <param name="fileName">The value for the 'fileName' parameter of this action.</param>
        /// <param name="buffer">The value for the 'buffer' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UploadFilePart(string fileName, byte[] buffer)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("fileName", fileName);
            parameters.Add("buffer", buffer);
            this.ValidateMethod("UploadFilePart", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UploadFilePart", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UploadDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UploadDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUploadDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'FileIfExistsDelete' operation.
            /// </summary>
            /// <param name="fileName">The value for the 'fileName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UploadDomainService/FileIfExistsDeleteDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UploadDomainService/FileIfExistsDelete", ReplyAction="http://tempuri.org/UploadDomainService/FileIfExistsDeleteResponse")]
            IAsyncResult BeginFileIfExistsDelete(string fileName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginFileIfExistsDelete'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginFileIfExistsDelete'.</param>
            /// <returns>The 'Boolean' returned from the 'FileIfExistsDelete' operation.</returns>
            bool EndFileIfExistsDelete(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UploadFilePart' operation.
            /// </summary>
            /// <param name="fileName">The value for the 'fileName' parameter of this action.</param>
            /// <param name="buffer">The value for the 'buffer' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UploadDomainService/UploadFilePartDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UploadDomainService/UploadFilePart", ReplyAction="http://tempuri.org/UploadDomainService/UploadFilePartResponse")]
            IAsyncResult BeginUploadFilePart(string fileName, byte[] buffer, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUploadFilePart'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUploadFilePart'.</param>
            /// <returns>The 'Boolean' returned from the 'UploadFilePart' operation.</returns>
            bool EndUploadFilePart(IAsyncResult result);
        }
        
        internal sealed class UploadDomainContextEntityContainer : EntityContainer
        {
            
            public UploadDomainContextEntityContainer()
            {
            }
        }
    }
}
